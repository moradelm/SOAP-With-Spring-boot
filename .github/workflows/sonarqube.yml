name: DevSecOps Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  sonar:
    name: SonarQube Scan
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout source code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up JDK 17 using Temurin distribution
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin' # Updated to use Temurin
          cache: maven # Enables dependency caching for Maven projects

      # Step 3: Run SonarQube scan
      - name: Run SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -sSLo sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonar-scanner-cli.zip
          export PATH=$PATH:$(pwd)/sonar-scanner-4.6.2.2472-linux/bin
          sonar-scanner -Dsonar.projectKey=devsecopspratique
          sonar-scanner -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  zap_scan:
    name: OWASP ZAP Security Scan
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout source code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Launch OWASP ZAP via Docker
      - name: Start OWASP ZAP container
        run: |
          docker pull owasp/zap2docker-stable
          docker run -d -u zap --name zap -p 8080:8080 owasp/zap2docker-stable

      # Step 3: Execute OWASP ZAP Scan
      - name: Run ZAP scan
        run: |
          docker exec zap zap-baseline.py -t http://localhost:8080 -g gen.conf -r zap_report.html

      # Step 4: Upload ZAP report
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v2
        with:
          name: zap-report
          path: zap_report.html
